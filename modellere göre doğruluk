# Gerekli kütüphaneler
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Makine Öğrenmesi Modelleri
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from xgboost import XGBClassifier

import warnings
warnings.filterwarnings('ignore')

# Veri setlerini yükleme
red = pd.read_csv("winequality-red.csv", sep=";")
white = pd.read_csv("winequality-white.csv", sep=";")

# Renk bilgisini ekliyoruz (kırmızı:0, beyaz:1)
red['color'] = 0
white['color'] = 1

# İkisini birleştiriyoruz
data = pd.concat([red, white], axis=0)

# 3 sınıfa ayırıyoruz
def quality_label(q):
    if q <= 4:
        return 0  # Düşük kalite
    elif q <= 6:
        return 1  # Orta kalite
    else:
        return 2  # Yüksek kalite

data['quality'] = data['quality'].apply(quality_label)

# Özellikler ve hedef değişken
X = data.drop('quality', axis=1)
y = data['quality']

# Veriyi eğitim ve test olarak ayırıyoruz
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Özellikleri ölçeklendirme
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Modelleri tanımlama
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "Logistic Regression": LogisticRegression(),
    "Naive Bayes": GaussianNB(),
    "SVM": SVC(),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
}

# Eğitim ve Değerlendirme
results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc
    print(f"Model: {name}")
    print("Accuracy:", round(acc, 4))
    print(classification_report(y_test, y_pred))
    print("="*50)

# Sonuçları görselleştirme
plt.figure(figsize=(12,6))
sns.barplot(x=list(results.keys()), y=list(results.values()))
plt.title('Modellere Göre Doğruluk Oranları (Red + White Şarap)')
plt.ylabel('Doğruluk')
plt.xticks(rotation=45)
plt.ylim(0, 1)
plt.grid()
plt.show()
